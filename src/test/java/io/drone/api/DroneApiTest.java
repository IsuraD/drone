/**
 * Swagger Drone - OpenAPI 3.0
 * This is a sample definition for loading drones with medicines. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: isuradilhara@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.drone.api;

import io.drone.model.Drone;
import io.drone.model.LoadDrone;
import org.junit.Test;
import org.junit.Before;

import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.List;


/**
 * Swagger Drone - OpenAPI 3.0
 *
 * <p>This is a sample definition for loading drones with medicines. 
 *
 * API tests for DroneApi 
 */
public class DroneApiTest {


    private DroneApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://localhost:8080/api/v3", DroneApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    /**
     * Add a new drone
     *
     * Add a new drone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDroneTest() {
        Drone body = null;
        //Drone response = api.addDrone(body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Delate a drone
     *
     * Delate a drone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDroneTest() {
        String serialNumber = null;
        //api.deleteDrone(serialNumber);
        
        // TODO: test validations
        
        
    }
    /**
     * get available drones for loading
     *
     * Get all available drones for loading
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAavailbleDronesToLoadTest() {
        //List<DroneSearch> response = api.getAavailbleDronesToLoad();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * get a  drone
     *
     * Get a  drone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDroneTest() {
        String serialNumber = null;
        //DroneGet response = api.getDrone(serialNumber);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * get all drones
     *
     * Get all drones
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDronesTest() {
        //List<DroneGet> response = api.getDrones();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Load medicine to drone
     *
     * Load medicine to drone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loadDroneTest() {
        LoadDrone body = null;
        String serialNumber = null;
        //LoadDrone response = api.loadDrone(body, serialNumber);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    /**
     * Update a new drone
     *
     * Update a  drone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDroneTest() {
        Drone body = null;
        String serialNumber = null;
        //Drone response = api.updateDrone(body, serialNumber);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
}
